<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="product">

<insert id="orderInfo">
		insert into orders(orderId, mid, orderRec, userAddr1, userAddr2, userAddr3, orderPhon, amount)
	    	values(#{orderId}, #{mid}, #{orderRec}, #{userAddr1}, #{userAddr2}, #{userAddr3}, #{orderPhon}, #{amount})
	</insert>
	    
	<!-- 주문 상세 정보 -->  
	<insert id="orderInfo_Details">
		insert into order_details (orderId, pdnu, ctcnt)
		   	select #{orderId}, pdnu, ctcnt 
			from cart 
			where mid=
			(
				select DISTINCT mid 
				from orders 
				where orderId=#{orderId}
			)  
	</insert>
	
<!-- 특정 주문 목록 -->
<select id="orderView" resultType="com.spring.shop.vo.OrderListVO">
   select
       o.orderId, o.mid, o.orderRec, o.userAddr1, o.userAddr2, o.userAddr3, o.orderPhon, o.amount, o.orderDate,
       d.orderDetailsNum, d.pdnu, d.ctcnt,
       p.pdname, p.pdimg1, p.pdPrice
   from orders o
           inner join order_details d
               on o.orderId = d.orderId
           inner join product p
               on d.pdnu = p.pdnu
       where o.mid = #{mid}
           and o.orderId = #{orderId}
</select>	


<!-- 특정 유저의 주문 목록 -->
<select id="orderList" resultType="com.spring.shop.vo.OrderVO">
   select
       orderId, mid, orderRec, userAddr1, userAddr2, userAddr3, orderPhon, amount, orderDate
   from orders 
       where mid = #{mid}
</select>

<!-- 카트 비우기 -->
<delete id="cartAllDelete">
   delete from cart
       where mid = #{mid}
</delete>

<!-- 장바구니 삭제 -->
<delete id="deleteCart">
	delete from cart where cartnum = #{cartnum}
		and mid = #{mid};
</delete>

<delete id="deletecartpd">
	delete from cart where pdnu=#{pdnu}
</delete>

<select id="countCart" resultType="int">
	SELECT COUNT(*) FROM cart where pdnu=#{pdnu}
</select>


<!-- 장바구니 리스트 -->
<select id="cartList" resultType="com.spring.shop.vo.CartListVO">
select row_number() over(order by cartnum DESC) AS num,
c.cartnum, c.mid, c.pdnu, c.ctcnt, c.addDate,
p.pdname, p.pdprice, p.pdimg1
from cart c INNER join product p on c.pdnu = p.pdnu where c.mid = #{mid};
</select>




<select id="productList" resultType="com.spring.shop.vo.ProductVO">
	SELECT * FROM product
</select>

<select id="list" resultType="com.spring.shop.vo.ProductVO">
	SELECT DISTINCT product.pdnu, product.pdname, product.pdimg1, product.pdprice, review.ratingavg from product left join review on product.pdnu=review.pdnu where catecode = #{catecode} order by pddate desc 
</select>

<select id="new" resultType="com.spring.shop.vo.ProductVO">
	SELECT DISTINCT product.pdnu, product.pdname, product.pdimg1, product.pdprice, product.pdcnt, review.ratingavg from product left join review on product.pdnu=review.pdnu ORDER BY pddate DESC LIMIT 10
</select>

<select id="best" resultType="com.spring.shop.vo.ProductVO">
	SELECT DISTINCT product.pdnu, product.pdname, product.pdimg1, product.pdprice, product.pdcnt, review.ratingavg from product left join review on product.pdnu=review.pdnu where soldcnt >= 30
</select>

<insert id="productInsert">
	INSERT INTO product(pdnu, catecode, pdname, pdcontent, pdprice, pdcnt, pdimg1, pdimg2, pdimg3, pddtimg, pdtype, pdshape) 
	value(#{pdnu}, #{catecode}, #{pdname}, #{pdcontent}, #{pdprice}, #{pdcnt}, #{pdimg1}, #{pdimg2}, #{pdimg3}, #{pddtimg}, #{pdtype}, #{pdshape})
</insert>

<insert id="insertCart">
	INSERT INTO cart(mid, pdnu, ctcnt) 
	value(#{mid}, #{pdnu}, #{ctcnt})
</insert>


<delete id="productDelete">
	DELETE FROM product WHERE pdnu = #{pdnu}
</delete>

<select id="productItem" resultType="com.spring.shop.vo.ProductVO">
	SELECT DISTINCT product.*, review.ratingavg from product left join review on product.pdnu=review.pdnu where product.pdnu = #{pdnu}
</select>

<select id="searchpd" resultType="com.spring.shop.vo.ProductVO">
	SELECT DISTINCT product.pdnu, 
					product.pdname 
	FROM product 
	JOIN order_details 
	ON product.pdnu = order_details.pdnu 
	JOIN orders 
	ON order_details.orderId = orders.orderId 
	WHERE mid = #{mid}
</select>

<select id="soldsearch" resultType="com.spring.shop.vo.OrderDetailVO">
	SELECT DISTINCT order_details.pdnu, order_details.ctcnt 
	FROM  orders 
	JOIN order_details 
	ON orders.orderId=order_details.orderId 
	WHERE orders.orderId=#{orderId} 
</select>




<update id="productUpdate">
	UPDATE product SET 
		catecode = #{catecode},	
		pdname	= #{pdname},
		pdcontent = #{pdcontent},	
		pdprice	= #{pdprice},
		pdimg1	= #{pdimg1},
		pdimg2	= #{pdimg2},
		pdimg3	= #{pdimg3},
		pddtimg	= #{pddtimg},
		pdshape = #{pdshape},
		pdtype = #{pdtype},
		pdcnt = #{pdcnt}
	WHERE
		pdnu = #{pdnu}
</update>

<update id="soldcnt">
    UPDATE product SET
        pdcnt = pdcnt - #{ctcnt},
        soldcnt = soldcnt + #{ctcnt}
    WHERE
        pdnu = #{pdnu}
</update>




<!-- 게시글 검색기능을 추가 -->
	<!-- 제목+이름, 제목(title), 이름(writer) -->
	<!-- 모든 조회 + 옵션으로 추가기능 -->
	<!-- 질의어를 추가 include refid="추가" -->
	<select id="listAll" resultType="com.spring.shop.vo.ProductVO">
		SELECT * FROM product 
		<include refid="search"></include> <!-- 질의어에 해당부분을 추가 -->
		<include refid="pagingFooter"></include>
	</select> 
	<!-- sql의 일부분을 분리해서 선언할 때 -->
	<!-- == 같은것 찾을 때, like 포함되어 있는 것 찾을 때 -->
	<!-- writer like 홍길동%-시작하는 단어, %홍길동-끝나는 단어, %홍길동%-포함된 단어  -->
	<sql id = "search">
		<choose>
			<when test="searchOption == 'all'">
				<!-- 모든곳에서 조회 -->
				WHERE (pdnu like concat('%',#{keyword},'%')
				OR pdname like concat('%',#{keyword},'%')
				OR pdcontent like concat('%',#{keyword},'%')) ORDER BY pddate DESC
			</when>
			<otherwise>
				<!-- 해당부분에서만 조회 -->
				WHERE (${searchOption} like concat('%',#{keyword},'%')) ORDER BY pddate DESC
			</otherwise>
		</choose>		
	</sql>
	<select id="listCate" resultType="com.spring.shop.vo.ProductVO">
    
    	SELECT DISTINCT product.pdnu, product.pdname, product.pdimg1, product.pdprice, product.pdcnt, review.ratingavg from product left join review on product.pdnu=review.pdnu where catecode = #{catecode} AND 
           
    <include refid="typelist"></include>
		AND
	<include refid="shapelist"></include>
	<include refid="catesearch" />
    <include refid="pagingFooter"></include>
	</select>
	<select id="countArticle" resultType="int">
		SELECT COUNT(*) FROM product 
		<include refid="search"></include>
	</select>
	<select id="countCate" resultType="int">
		SELECT COUNT(*) FROM product WHERE catecode = #{catecode} AND
		<include refid="typelist"></include>
		AND
		<include refid="shapelist"></include>
		<include refid="catesearch" />

	</select>
	<sql id="typelist">
		pdtype in
		<choose>
	        <when test="pdtypes.contains(0)">
	            <!-- Lookup Everywhere -->
	            (1, 2)
	        </when>
	        <otherwise>
	            <!-- Search only for the relevant part -->
	            <foreach collection="pdtypes" item="pdtype" open="(" close=")" separator=",">
					#{pdtype}
				</foreach>
	        </otherwise>
	    </choose>		
	</sql>
	<sql id="shapelist">
   	 	pdshape in
	    <choose>
	        <when test="pdshapes.contains(0)">
	            <!-- Lookup Everywhere -->
	            (1, 2, 3, 4, 5)
	        </when>
	        <otherwise>
	            <!-- Search only for the relevant part -->
	            <foreach collection="pdshapes" item="pdshape" open="(" close=")" separator=",">
	                #{pdshape}
	            </foreach>
	        </otherwise>
	    </choose>
	</sql>
	<sql id="pagingHeader">
		SELECT * FROM
	</sql>
	<sql id="pagingFooter">
		 LIMIT #{start}, #{end}
	</sql>
	<sql id="catesearch">
	    <choose>
	        <when test="searchOption == 'all'">
	            <!-- Lookup Everywhere -->
	            AND (pdname LIKE CONCAT('%', #{keyword}, '%')) ORDER BY pddate DESC
	        </when>
	        <otherwise>
	            <!-- Search only for the relevant part -->
	           AND (${searchOption} LIKE CONCAT('%', #{keyword}, '%')) ORDER BY pddate DESC
	        </otherwise>
	    </choose>
	</sql>
	<select id="orderscount" resultType="int">
		SELECT COUNT(*) FROM orders WHERE mid=#{mid}
	</select>
	<delete id="ordersdelete">
		DELETE FROM orders WHERE mid=#{mid}
	</delete>
	
	<delete id="detaildelete">
		DELETE FROM order_details WHERE orderId=#{orderId}
	</delete>
	
</mapper>